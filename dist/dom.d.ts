declare function domFragment(html: string, returnHTML?: boolean): any;
declare function appendString2Node(html: string, target: HTMLElement | Node): void;
declare function rangeCompareNode(range: any, node: any): 1 | -1 | 0 | 2 | 3 | 4;
declare function rangeContainsNode(range: any, node: any, includePartial?: boolean): boolean;
export interface RangeNode {
    node: Node;
    startOffset?: number;
    endOffset?: number;
    isVoid: boolean;
    partial?: boolean;
    collapsed?: boolean;
}
declare function selectNodesBetweenRange(range: Range): Node[];
declare function selectDeepNodesInRange(range: Range): RangeNode[];
declare function nodeReplaceWith(node: any, replaceNodes: any[]): void;
declare function nodeTextMerge(nodes: Node[]): void;
declare function nodeTextMergeAll(parent: HTMLElement): void;
declare function wrapNode(node: Node, placeholder: HTMLElement): void;
declare function unwrapNode(node: Node, container?: HTMLElement | undefined): void;
declare function unwrapNodes(nodes: any[], tag: string | string[], container: any, range: any): void;
declare function mergeTags(container: HTMLElement, tag: string): void;
declare function nodeAttrStyle(el: HTMLElement, tag?: string): any;
declare function nodeReplaceAttrStyle(el: HTMLElement, tag: string, value: string): void;
declare function nodeChildRemoveAttrStyle(el: HTMLElement, tag: string, value: string): void;
declare function nodeBreak(container: Node, midNode: Node): void;
declare function nodesAreTextInlineOrVoid(nodes: (Node | ChildNode)[]): boolean;
declare function nodesAreTextOrVoid(nodes: (Node | ChildNode)[]): boolean;
declare function nodeIsTextInlineOrVoid(n: Node | ChildNode): boolean;
declare function nodeIsTextOrVoid(n: Node | ChildNode): boolean;
declare function nodeIsText(n: Node | ChildNode): boolean;
declare function nodeIsVoid(n: Node | ChildNode): boolean;
declare function nodeIsInlineFormat(n: Node | ChildNode): boolean;
declare function nodeChildFirst(n: Node): Node;
declare function nodeChildLast(n: Node): Node;
declare function nodeChildInsertInto(target: Node, node: Node): void;
declare function nodeChildInsertBefore(target: Node, beforeNode: Node, node: Node): void;
declare function nodesInsertAfter(nodes: Node[], dest: Node): void;
declare function nodePosition(n: any): number;
declare function nodePrev(n: any, container: any): any;
declare function nodeParentUntil(node: Node, until: HTMLElement): Node[];
declare function nodeParent(n: Node, tag?: string | any, container?: HTMLElement): Node | null;
declare function nodeNext(n: any, container: any): any;
declare function getRangeFocus(container: HTMLElement): false | Range;
declare function getRange(): false | Range;
declare function getSelection(): Selection | null;
declare function setCaretAt(node: Node, startOffset?: number): void;
declare function resetSelection(node: any, startOffset?: number, endOffset?: number): Selection | undefined;
declare function nodeNameCompareIndex(n: any, name: string | string[]): number;
declare function nodeNameCompare(n: any, name: string | string[]): boolean;
declare const exp: {
    domFragment: typeof domFragment;
    appendString2Node: typeof appendString2Node;
    rangeCompareNode: typeof rangeCompareNode;
    rangeContainsNode: typeof rangeContainsNode;
    selectDeepNodesInRange: typeof selectDeepNodesInRange;
    nodeReplaceWith: typeof nodeReplaceWith;
    nodeTextMerge: typeof nodeTextMerge;
    nodeTextMergeAll: typeof nodeTextMergeAll;
    wrapNode: typeof wrapNode;
    unwrapNode: typeof unwrapNode;
    unwrapNodes: typeof unwrapNodes;
    mergeTags: typeof mergeTags;
    nodeAttrStyle: typeof nodeAttrStyle;
    nodeReplaceAttrStyle: typeof nodeReplaceAttrStyle;
    nodeChildRemoveAttrStyle: typeof nodeChildRemoveAttrStyle;
    nodeIsVoid: typeof nodeIsVoid;
    nodeIsText: typeof nodeIsText;
    nodeIsTextOrVoid: typeof nodeIsTextOrVoid;
    selectNodesBetweenRange: typeof selectNodesBetweenRange;
    nodeIsTextInlineOrVoid: typeof nodeIsTextInlineOrVoid;
    nodesAreTextOrVoid: typeof nodesAreTextOrVoid;
    getSelection: typeof getSelection;
    getRange: typeof getRange;
    getRangeFocus: typeof getRangeFocus;
    resetSelection: typeof resetSelection;
    nodeIsInlineFormat: typeof nodeIsInlineFormat;
    nodesAreTextInlineOrVoid: typeof nodesAreTextInlineOrVoid;
    nodeNext: typeof nodeNext;
    nodeChildFirst: typeof nodeChildFirst;
    nodeChildLast: typeof nodeChildLast;
    nodePrev: typeof nodePrev;
    nodeNameCompare: typeof nodeNameCompare;
    nodeNameCompareIndex: typeof nodeNameCompareIndex;
    nodeParentUntil: typeof nodeParentUntil;
    nodeParent: typeof nodeParent;
    nodeChildInsertBefore: typeof nodeChildInsertBefore;
    nodeChildInsertInto: typeof nodeChildInsertInto;
    nodePosition: typeof nodePosition;
    nodesInsertAfter: typeof nodesInsertAfter;
    setCaretAt: typeof setCaretAt;
    nodeBreak: typeof nodeBreak;
    table: {
        cellList: (table: HTMLElement, withHeader?: boolean, useNull?: boolean) => (HTMLElement | null)[][];
        col: (table: HTMLElement) => number;
        rowCol: (tr: HTMLElement) => number;
        colSpan: (node: HTMLElement) => number;
        rowSpan: (node: HTMLElement) => number;
    };
};
export default exp;
